# Obtain genes that are regulated differently in the pan Cov infection but not the mock
which(apply(candCov2, 1, function(x) {
if (x[3] >= 0 && x[2] <= 0 && x[1] <= 0) {
return(T)
} else if (x[3] <= 0 && x[2] >= 0 && x[1] >= 0) {
return(T)
} else {
return(F)
}
}))
candCov2
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
which(apply(candPan, 1, function(x) {
if (x[[3]] >= 0 && x[[2]] <= 0 && x[[1]] <= 0) {
return(T)
} else if (x[[3]] <= 0 && x[[2]] >= 0 && x[[1]] >= 0) {
return(T)
} else {
return(F)
}
}))
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
which(apply(candPan, 1, function(x) {
if (x[1] >= 0 && (x[2] <= 0 && x[3] <= 0)) {
return(T)
} else if (x[1] <= 0 && (x[2] >= 0 && x[3] >= 0)) {
return(T)
} else {
return(F)
}
}))
apply(candPan, 1, function(x) return(x[1]))
apply(head(candPan), 1, function(x) return(x[1]))
is.numeric(candCov1[,1])
apply(head(candPan), 1, function(x) return(x[1]))
apply(head(candPan), 1, function(x) return(as.numeric(x[1])))
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one >= 0 && (two <= 0 && three <= 0)) {
return(T)
} else if (one <= 0 && (two >= 0 && three >= 0)) {
return(T)
} else {
return(F)
}
}))
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one >= 0 && (two <= 0 && three <= 0)) {
return(T)
} else if (one <= 0 && (two >= 0 && three >= 0)) {
return(T)
} else {
return(F)
}
}))
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one >= 0 && (two <= 0 && three <= 0)) {
return(T)
} else if (one <= 0 && (two >= 0 && three >= 0)) {
return(T)
} else {
return(F)
}
})),]
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one >= 0 && (two <= 0 && three <= 0)) {
return(T)
} else {
return(F)
}
})),]
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
sapply(row.names(candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one >= 0 && (two <= 0 && three <= 0)) {
return(T)
} else {
return(F)
}
})),]), print)
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
sapply(row.names(candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one <= 0 && (two >= 0 && three >= 0)) {
return(T)
} else {
return(F)
}
})),]), print)
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one <= 0 && (two >= 0 && three >= 0)) {
return(T)
} else {
return(F)
}
})),]
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one <= 0 && (two >= 0 && three >= 0)) {
if (x[7] == "Significant" && x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
sapply(row.names(candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one <= 0 && (two >= 0 && three >= 0)) {
if (x[7] == "Significant" && x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]), print)
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
sapply(row.names(candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one >= 0 && (two <= 0 && three <= 0)) {
if (x[7] == "Significant" && x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]), print)
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
row.names(candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one >= 0 && (two <= 0 && three <= 0)) {
if (x[7] == "Significant" && x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),])
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
theData[row.names(candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one >= 0 && (two <= 0 && three <= 0)) {
if (x[7] == "Significant" && x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]),]
head(candCov2)
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three >= 0 && (two <= 0 && one <= 0)) {
if (x[7] == "Significant" && x[6] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three >= 0 && (two <= 0 && one <= 0)) {
return(T)
# if (x[7] == "Significant" && x[6] == "Significant") {
#   return(T)
# } else {
#   return(F)
# }
} else {
return(F)
}
})),]
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one >= 0 && (two <= 0 && three <= 0)) {
if (x[7] == "Significant" && x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
dim(candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one >= 0 && (two <= 0 && three <= 0)) {
if (x[7] == "Significant" && x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),])
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one <= 0 && (two >= 0 && three >= 0)) {
if (x[7] == "Significant" && x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]
# Obtain genes that are regulated differently in the pan Cov infection but not the mock
sapply(row.names(candPan[which(apply(candPan, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (one <= 0 && (two >= 0 && three >= 0)) {
if (x[7] == "Significant" && x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]), print)
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three >= 0 && (two <= 0 && one <= 0)) {
return(T)
# if (x[7] == "Significant" && x[6] == "Significant") {
#   return(T)
# } else {
#   return(F)
# }
} else {
return(F)
}
})),]
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
sapply(row.names(candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three >= 0 && (two <= 0 && one <= 0)) {
return(T)
# if (x[7] == "Significant" && x[6] == "Significant") {
#   return(T)
# } else {
#   return(F)
# }
} else {
return(F)
}
})),]), print)
head(candCov2)
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
sapply(row.names(candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three >= 0 && (two <= 0 && one <= 0)) {
#return(T)
if (x[6] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]), print)
head(candCov2)
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three >= 0 && (two <= 0 && one <= 0)) {
#return(T)
if (x[6] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
sapply(row.names(candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three >= 0 && (two <= 0 && one <= 0)) {
#return(T)
if (x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]), print)
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three >= 0 && (two <= 0 && one <= 0)) {
#return(T)
if (x[6] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three >= 0 && (two <= 0 && one <= 0)) {
#return(T)
if (x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]
head(candCov2)
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
sapply(row.names(candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three <= 0 && (two >= 0 && one >= 0)) {
#return(T)
if (x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]), print)
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
sapply(row.names(candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three <= 0 && (two >= 0 && one >= 0)) {
return(T)
# if (x[8] == "Significant") {
#   return(T)
# } else {
#   return(F)
# }
} else {
return(F)
}
})),]), print)
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
sapply(row.names(candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three <= 0 && (two >= 0 && one >= 0)) {
#return(T)
if (x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]), print)
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
theData[row.names(candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three <= 0 && (two >= 0 && one >= 0)) {
#return(T)
if (x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]),]
# Obtain genes that are differently regulated in Cov2 than in Cov1 and mock
candCov2[which(apply(candCov2, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (three <= 0 && (two >= 0 && one >= 0)) {
#return(T)
if (x[8] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]
head(candCov1)
candCov1[which(apply(candCov1, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (two <= 0 && (three >= 0 && one >= 0)) {
#return(T)
if (x[7] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]
candCov1[which(apply(candCov1, 1, function(x) {
one <- as.numeric(x[1])
two <- as.numeric(x[2])
three <- as.numeric(x[3])
if (two >= 0 && (three <= 0 && one <= 0)) {
#return(T)
if (x[7] == "Significant") {
return(T)
} else {
return(F)
}
} else {
return(F)
}
})),]
