install.packages("BiocManager")
BiocManager::install("OmnipathR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("OmnipathR")
setRepositories()
install.packages("installr")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade"))
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(limma)
library(ggplot2)
library(reshape)
setwd("/home/zuhaib/Desktop/covid19Research/microarrayData/GSE56677/arrayFiles")
filesToRead <- list.files()[grep("GSM", list.files())]
data <- read.maimages(filesToRead, source="agilent", green.only=TRUE)
exp <- data$E
row.names(exp) <- data$genes$ProbeName
setwd("../")
meta <- read.table("meta.txt", header = T, sep = "\t")
colnames(exp) <- sapply(strsplit(colnames(exp), "_"), function(x) return(x[1]))
colnames(exp) <- sapply(colnames(exp), function(x) {
return(meta$Sample_title[which(meta$Sample_geo_accession == x)])
})
########### QUALITY CONTROL BEFORE CLEANING ###########
# logExp <- as.data.frame(log2(exp))
# names(logExp) <- sapply(strsplit(names(logExp), "_"), function(x) return(x[1]))
# longLogExp <- melt(logExp)
# ggplot(longLogExp, aes(value)) + geom_density(aes(color=variable))
# rm(logExp)
# rm(longLogExp)
########## BACKGROUND CORRECTION WITH NORMEXP ############
exp <- backgroundCorrect(exp, method = "normexp")
# logExp <- as.data.frame(log2(exp))
# names(logExp) <- sapply(strsplit(names(logExp), "_"), function(x) return(x[1]))
# longLogExp <- melt(logExp)
# ggplot(longLogExp, aes(value)) + geom_density(aes(color=variable))
# rm(logExp)
# rm(longLogExp)
############ NORMALIZATION #############
exp <- normalizeQuantiles(exp)
# logExp <- as.data.frame(log2(exp))
# names(logExp) <- sapply(strsplit(names(logExp), "_"), function(x) return(x[1]))
# longLogExp <- melt(logExp)
# ggplot(longLogExp, aes(value)) + geom_density(aes(color=variable))
# rm(logExp)
# rm(longLogExp)
meta
# Mock 0h vs 3h
meta1 <- meta[intersect(union(which(meta$Time == "0h"), which(meta$Time == "3h")), which(meta$Infection == "Mock")),]
data1 <- log2(exp[,meta1$Sample_title])
meta1
head(data1)
desMat <- model.matrix(~Time, meta1)
fits <- lmFit(data1, design = desMat)
fitContrasts <- contrasts.fit(fits, makeContrasts("Time3h", levels = desMat))
ebys <- eBayes(fitContrasts)
a <- topTable(ebys, number = 70000)
a$Colour <- sapply(a$adj.P.Val, function(x) {if (x <= 0.05) return("Significant") else return("Not")})
a6 <- a
head(a6)
volcanoplot(ebys)
setwd("./DE")
write.table(a6, "mock-0h-mock-3h.txt", sep = "\t", row.names = F, col.names = T, quote = F)
# Mock 3h vs 7h
meta1 <- meta[intersect(union(which(meta$Time == "3h"), which(meta$Time == "7h")), which(meta$Infection == "Mock")),]
data1 <- log2(exp[,meta1$Sample_title])
head(meta1)
head(data1)
desMat <- model.matrix(~Time, meta1)
fits <- lmFit(data1, design = desMat)
fitContrasts <- contrasts.fit(fits, makeContrasts("Time7h", levels = desMat))
ebys <- eBayes(fitContrasts)
a <- topTable(ebys, number = 70000)
a$Colour <- sapply(a$adj.P.Val, function(x) {if (x <= 0.05) return("Significant") else return("Not")})
a7 <- a
head(a2)
head(a7)
volcanoplot(ebys)
write.table(a7, "mock-3h-mock-7h.txt", sep = "\t", row.names = F, col.names = T, quote = F)
# Mock 7h vs 12h
meta1 <- meta[intersect(union(which(meta$Time == "7h"), which(meta$Time == "12h")), which(meta$Infection == "Mock")),]
data1 <- log2(exp[,meta1$Sample_title])
desMat <- model.matrix(~Time, meta1)
fits <- lmFit(data1, design = desMat)
fitContrasts <- contrasts.fit(fits, makeContrasts("Time7h", levels = desMat))
ebys <- eBayes(fitContrasts)
a <- topTable(ebys, number = 70000)
a$Colour <- sapply(a$adj.P.Val, function(x) {if (x <= 0.05) return("Significant") else return("Not")})
a3 <- a
a3$logFC <- (-1) * a3$logFC
rm(a3)
a <- topTable(ebys, number = 70000)
a$Colour <- sapply(a$adj.P.Val, function(x) {if (x <= 0.05) return("Significant") else return("Not")})
a8 <- a
a8$logFC <- (-1) * a3$logFC
a8$logFC <- (-1) * a8$logFC
head(a8)
volcanoplot(ebys)
meta1
head(data1)
write.table(a8, "mock-7h-mock-12h.txt", sep = "\t", row.names = F, col.names = T, quote = F)
# Mock 12h vs 18h
meta1 <- meta[intersect(union(which(meta$Time == "12h"), which(meta$Time == "18h")), which(meta$Infection == "Mock")),]
data1 <- log2(exp[,meta1$Sample_title])
desMat <- model.matrix(~Time, meta1)
fits <- lmFit(data1, design = desMat)
fitContrasts <- contrasts.fit(fits, makeContrasts("Time18h", levels = desMat))
ebys <- eBayes(fitContrasts)
a <- topTable(ebys, number = 70000)
a$Colour <- sapply(a$adj.P.Val, function(x) {if (x <= 0.05) return("Significant") else return("Not")})
a9 <- a
head(a9)
volcanoplot(ebys)
head(a9)
meta1
head(data1)
write.table(a9, "mock-12h-mock-18h.txt", sep = "\t", row.names = F, col.names = T, quote = F)
meta
meta[grep("Mock", meta$Infection),]
meta[grep("Mock", meta$Infection),]
unique(meta[grep("Mock", meta$Infection),3])
ls()
rm(list=ls())
######################################
# This script will take in the DE files anc convert them into long format
# See README.md for details on the format
######################################
setwd("/home/zuhaib/Desktop/covid19Research/microarrayData/GSE56677/DE")
fls <- list.files()[grep("h", list.files())]
fls <- list.files()[grep("m", list.files())]
fls
dfs <- lapply(fls, function(x) return(read.table(x, header = T, sep = "\t")[,c(2,7)]))
names(dfs) <- fls
dfs <- lapply(dfs, function(x) {
z <- x
z$Gene <- row.names(z)
return(z)
})
lapply(dfs, head)
fls <- list.files()[grep("m", list.files())]
dfs <- lapply(fls, function(x) return(read.table(x, header = T, sep = "\t")[,c(1,2,6,8)]))
names(dfs) <- fls
dfs <- lapply(dfs, function(x) {
z <- x
z$Gene <- row.names(z)
return(z)
})
lapply(dfs, head)
dfs <- lapply(fls, function(x) return(read.table(x, header = T, sep = "\t")[,c(1,2,6,8)]))
names(dfs) <- fls
lapply(dfs, head)
data <- read.table("../normalizedExpression.txt", sep = "\t", header = T)
data <- read.table("../normalizedExpression.txt", sep = "\t", header = T)
head(data)
lapply(dfs, head)
sapply(dfs, dim)
dim(data)
mers.0h.mers.3h <- data.frame(Gene = row.names(data), T1 = 0, T2 = 3)
mers.0h.mers.3h <- merge(mers.0h.mers.3h, dfs$`mers-0h-mers-3h.txt`, all = T)
head(mers.0h.mers.3h)
head(dfs$`mers-0h-mers-3h.txt`)
lapply(dfs, head)
data <- read.table("../normalizedExpression.txt", sep = "\t", header = T)
head(data)
##### BUILDING THE S1 MATRIX #####
### 4H VS 12H DATA ###
s1.4h.s1.12h <- data.frame(Gene = data$ID, T1 = 4, T2 = 12)
rm(s1.4h.s1.12h)
mers.0h.mers.3h <- data.frame(Gene = data$ID, T1 = 0, T2 = 3)
mers.0h.mers.3h <- merge(mers.0h.mers.3h, dfs$`mers-0h-mers-3h.txt`, all = T)
head(mers.0h.mers.3h)
data <- read.table("../normalizedExpression.txt", sep = "\t", header = T)
mers.0h.mers.3h <- data.frame(Gene = data$ID, T1 = 0, T2 = 3)
mers.0h.mers.3h <- data.frame(Gene = data$Gene, T1 = 0, T2 = 3)
head(mers.0h.mers.3h)
head(dfs$`mers-0h-mers-3h.txt`)
data <- read.table("../normalizedExpression.txt", sep = "\t", header = T)
row.names(data) <- data[,1]
data <- read.table("../normalizedExpression.txt", sep = "\t", header = T)
head(data)
mers.0h.mers.3h <- data.frame(Gene = data$ID, T1 = 0, T2 = 3)
lapply(dfs, head)
adf <- dfs$`mers-0h-mers-3h.txt`
adf
adf[order(adf$ID),]
adf[order(adf$ID, decreasing = T),]
adf[intersect(order(adf$ID), which(adf$Colour == "Significant")),]
aggs <- aggregate(adf)
head(adf)
aggs <- aggregate(adf, FUN = function(x) {
return(ID = c(unique(x[,1]), Mean = mean(x[,2]), SD = sd(x[,2]), sigs = length(which(x[,4] == "Significant")) / nrow(x)))
})
d.f <- data.frame(rating = c("AAA", "A", "A", "AAA",
"BB", "BB", "AAA", "A"))
i <- 1
by <- d.f$rating
sub.data.frame <- d.f[by == unique(by)[i], ]
d.f
by
sub.data.frame
values <- data.frame(value = c("a", "a", "a", "a", "a",
"b", "b", "b",
"c", "c", "c", "c"))
values
nr.of.appearances <- aggregate(x = values,
by = list(unique.values = values$value),
FUN = length)
nr.of.appearances
list(unique.values = values$value)
nr.of.appearances <- aggregate(x = values,
by = values$value,
FUN = length)
head(adf)
aggs <- aggregate(adf, by = list(adf$ID), FUN = function(x) {
return(ID = c(unique(x[,1]), Mean = mean(x[,2]), SD = sd(x[,2]), sigs = length(which(x[,4] == "Significant")) / nrow(x)))
})
head(adf)
head(adf)
aggLFC <- aggregate(adf$logFC, by = adf["logFC"], mean)
head(aggLFC)
aggLFC <- aggregate(adf["ID"], by = adf["logFC"], mean)
head(aggLFC)
aggLFC <- aggregate(adf["logFC"], by = adf["ID"], mean)
head(aggLFC)
dim(aggLFC)
head(adf)
aggSig <- aggregate(adf["Colour"], by = adf["ID"], function(x) {
return(length(which(x == "Significant")) / length(x))
})
head(aggSig)
head(aggSig[which(aggSig != 0),])
head(aggSig[which(aggSig$Colour != 0),])
head(aggSig[intersect(which(aggSig$Colour != 0), which(aggSig$Colour != 1)),])
dim(aggSig[intersect(which(aggSig$Colour != 0), which(aggSig$Colour != 1)),])
aggSig[intersect(which(aggSig$Colour != 0), which(aggSig$Colour != 1)),]
head(aggSig)
head(aggLFC)
hist(aggSig$Colour)
hist(aggSig$Colour[which(aggSig$Colour != 0)])
head(adf)
aggSD <- aggregate(adf["logFC"], by = adf["ID"], sd)
head(aggID)
head(aggSD)
agg <- merge(aggLFC, aggSig, by = "ID")
head(agg)
agg <- merge(agg, aggSD, by = "ID")
head(agg)
names(agg) <- c("ID", "Mean", "Sig", "SD")
head(agg)
agg[intersect(which(agg$Sig != 0), which(agg$Sig != 1)),]
hist(agg$SD)
summary(agg$SD)
agg[intersect(which(agg$Sig != 0), which(agg$Sig != 1)),]
summarry(agg[intersect(which(agg$Sig != 0), which(agg$Sig != 1)),4])
summary(agg[intersect(which(agg$Sig != 0), which(agg$Sig != 1)),4])
summary(agg$SD)
summary(agg$Mean)
summary(agg$SD)
summary(agg$Sig)
head(agg[which(is.na(agg$SD)),])
grep("A_19_P00315452", adf$ID)
aggLen <- aggregate(adf["ID"], by = adf["ID"], length)
head(aggLen)
hist(aggLen$ID)
head(aggLen)
hist(aggLen[,2])
summary(aggLen[,2])
boxplot(aggLen[,2])
hist(aggLen[,2])
hist(aggLen[which(aggLen[,2] != 1),2])
boxplot(aggLen[which(aggLen[,2] != 1),2])
summary(aggLen[which(aggLen[,2] != 1),2])
hist(aggLen[which(aggLen[,2] != 1),2])
hist(aggLen[which(aggLen[,2] != 1),2], breaks = seq(0, 305, 5))
seq(0, 305, 5)
hist(aggLen[which(aggLen[,2] != 1),2], breaks = seq(0, 300, 5))
hist(aggLen[which(aggLen[,2] != 1),2], breaks = seq(0, 310, 5))
agg <- merge(aggLFC, aggSig, by = "ID")
agg <- merge(agg, aggSD, by = "ID")
agg <- merge(agg, aggLen, by = "ID")
head(agg)
head(aggLen)
head(aggLFC)
names(aggLFC)[2] <- "Mean"
names(aggLFS)[2] <- "Sig"
names(aggSig)[2] <- "Sig"
names(aggSD)[2] <- "SD"
names(aggLen)[2] <- "Length"
agg <- merge(aggLFC, aggSig, by = "ID")
agg <- merge(agg, aggSD, by = "ID")
agg <- merge(agg, aggLen, by = "ID")
head(agg)
head(agg[order(agg$SD, decreasing = T),])
head(agg[order(agg$SD, decreasing = T),], 500)
######################################
# This script will take in the DE files anc convert them into long format
# See README.md for details on the format
######################################
library(ggplot2)
ggplot(agg, aes(x = Lenth, y = SD)) + geom_point()
ggplot(agg, aes(x = Length, y = SD)) + geom_point()
head(agg[order(agg$SD, decreasing = T),], 500)
head(agg[order(agg$SD, decreasing = T),], 200)
ggplot(agg, aes(x = Sig, y = SD)) + geom_point()
summary(agg$Length)
hist(agg$Length)
length(which(agg$Length == 1))
length(which(agg$Length == 1)) / lenth(agg$Length)
length(which(agg$Length == 1)) / length(agg$Length)
rm(list=ls())
fls <- list.files()[grep("m", list.files())]
dfs <- lapply(fls, function(x) return(read.table(x, header = T, sep = "\t")[,c(1,2,6,8)]))
names(dfs) <- fls
data <- read.table("../normalizedExpression.txt", sep = "\t", header = T)
fracNotDuplicated <- sapply(dfs, function(adf) {
aggLen <- aggregate(adf["ID"], by = adf["ID"], length)
names(aggLen)[2] <- "Length"
length(which(agg$Length == 1)) / lenth(agg$Length)
})
fracNotDuplicated <- sapply(dfs, function(adf) {
aggLen <- aggregate(adf["ID"], by = adf["ID"], length)
names(aggLen)[2] <- "Length"
return(length(which(aggLen[,2] == 1)) / lenth(aggLen[,2]))
})
fracNotDuplicated <- sapply(dfs, function(adf) {
aggLen <- aggregate(adf["ID"], by = adf["ID"], length)
names(aggLen)[2] <- "Length"
return(length(which(aggLen[,2] == 1)) / length(aggLen[,2]))
})
fracNotDuplicated
fracNotDuplicated <- lapply(dfs, function(adf) {
aggSig <- aggregate(adf["Colour"], by = adf["ID"], function(x) {
return(length(which(x == "Significant")) / length(x))
})
names(aggSig) <- c("ID", "Sig")
return(aggSig)
})
lapply(fracNotDuplicated, head)
sigs <- Reduce(fracNotDuplicated, merge, by = "ID")
head(sigs)
sigs <- Reduce(fracNotDuplicated, merge, "ID")
sigs <- Reduce(function(d1, d2) merge(d1, d2, by = "ID"), fracNotDuplicated)
lapply(fracNotDuplicated, head)
head(sigs)
head(sigs)
bdf <- dfs$`mers-0h-mers-3h.txt`
aggSD <- aggregate(bdf["logFC"], by = bdf["ID"], sd)
aggLen <- aggregate(bdf["ID"], by = bdf["ID"], length)
names(aggLen)[2] <- "Length"
head(aggLen)
head(aggLen)
sigs <- merge(sigs, aggLen, by = "ID")
head(sigs)
length(which(sigs$Length != 1))
which(sigs$Length != 1)
sigs[which(sigs$Length != 1),]
sigs[which(sigs$Length != 1),2:10]
apply(sigs[which(sigs$Length != 1),2:10], 1, mean)
hist(apply(sigs[which(sigs$Length != 1),2:10], 1, mean))
summary(apply(sigs[which(sigs$Length != 1),2:10], 1, mean))
aggs <- lapply(dfs, function(adf) {
aggLFC <- aggregate(adf["logFC"], by = adf["ID"], mean)
names(aggLFC)[2] <- "Mean"
aggSig <- aggregate(adf["Colour"], by = adf["ID"], function(x) {
return(length(which(x == "Significant")) / length(x))
})
names(aggSig)[2] <- "Sig"
aggSD <- aggregate(bdf["logFC"], by = bdf["ID"], sd)
names(aggSD)[2] <- "SD"
aggLen <- aggregate(bdf["ID"], by = bdf["ID"], length)
names(aggLen)[2] <- "Length"
agg <- merge(aggLFC, aggSig, by = "ID")
agg <- merge(agg, aggSD, by = "ID")
agg <- merge(agg, aggLen, by = "ID")
})
lapply(aggs, head)
sapply(aggs, function(x) return(x[which(x[,5] != 1),3]))
sapply(aggs, function(x) return(mean(x[which(x[,5] != 1),3])))
aggs$`mers-18h-mers-24h.txt`[which(aggs$`mers-18h-mers-24h.txt`$Length != 1),]
head(aggs[[1]])
# Duplicate probeset maek up only ~2% of the probesets, and most of them are not significant
# We can (hopefully) remove them without conseqeuence.
dupProbesets <- aggs[[1]][which(aggs[[1]][,5] > 1),1]
dupProbesets
length(dupProbesets)
data <- read.table("../normalizedExpression.txt", sep = "\t", header = T)
head(data)
which(data$ID %in% dupProbesets)
length(which(data$ID %in% dupProbesets))
length(which(data$ID %in% dupProbesets)) / nrow(data)
lapply(aggs, head, 20)
rm(list=ls())
fls <- list.files()[grep("m", list.files())]
dfs <- lapply(fls, function(x) return(read.table(x, header = T, sep = "\t")[,c(1,2,6,8)]))
names(dfs) <- fls
## DEALING WITH DUPLICATE PROBE ENTRIES
# We want to look at duplicate probesets to see how to handle them
aggs <- lapply(dfs, function(adf) {
aggLFC <- aggregate(adf["logFC"], by = adf["ID"], mean)
names(aggLFC)[2] <- "Mean"
aggSig <- aggregate(adf["Colour"], by = adf["ID"], function(x) {
return(length(which(x == "Significant")) / length(x))
})
names(aggSig)[2] <- "Sig"
aggSD <- aggregate(adf["logFC"], by = adf["ID"], sd)
names(aggSD)[2] <- "SD"
aggLen <- aggregate(adf["ID"], by = adf["ID"], length)
names(aggLen)[2] <- "Length"
agg <- merge(aggLFC, aggSig, by = "ID")
agg <- merge(agg, aggSD, by = "ID")
agg <- merge(agg, aggLen, by = "ID")
})
# Duplicate probeset maek up only ~2% of the probesets, and most of them are not significant
# We can (hopefully) remove them without conseqeuence.
dupProbesets <- aggs[[1]][which(aggs[[1]][,5] > 1),1]
lapply(aggs, head, 20)
lapply(dfs, head)
lapply(aggs, head, 20)
lapply(dfs, head)
aggDfs <- lapply(dfs, function(adf) {
aggLFC <- aggregate(adf["logFC"], by = adf["ID"], mean)
aggP <- aggregate(adf["adj.P.Val"], by = adf["ID"], mean)
aggColour <- sapply(aggP[,2], function(x) {
if (x < 0.05) {
return("Significant")
} else {
return("Not")
}
})
agg <- merge(aggLFC, aggP, by = "ID")
agg$Colour <- aggColour
return(agg)
})
lapply(aggDfs, head)
lapply(aggDfs, head, 20)
lapply(aggDfs, dim)
rm(aggDfs)
## DEALING WITH DUPLICATE PROBE ENTRIES
# For duplicate entries, we're averaging the LFC and adjusted p-values.
# Issues with this will be mitigated in the app, as the data will be fully
# displayed if the user selects a duplicated probeset.
dfs <- lapply(dfs, function(adf) {
aggLFC <- aggregate(adf["logFC"], by = adf["ID"], mean)
aggP <- aggregate(adf["adj.P.Val"], by = adf["ID"], mean)
aggColour <- sapply(aggP[,2], function(x) {
if (x < 0.05) {
return("Significant")
} else {
return("Not")
}
})
agg <- merge(aggLFC, aggP, by = "ID")
agg$Colour <- aggColour
return(agg)
})
lapply(dfs, head)
length(unique(dfs[[1]]$ID))
length(dfs[[1]]$ID)
rm(dupProbesets)
probes <- dfs[[1]]$ID
head(probes)
length(probes)
which(duplicated(probes))
mers.0h.mers.3h <- data.frame(Gene = probes, T1 = 0, T2 = 3)
head(mers.0h.mers.3h)
mers.0h.mers.3h <- merge(mers.0h.mers.3h, dfs$`mers-0h-mers-3h.txt`, all = T)
head(mers.0h.mers.3h)
head(dfs$`mers-0h-mers-3h.txt`)
mers.0h.mers.3h <- data.frame(ID = probes, T1 = 0, T2 = 3)
mers.0h.mers.3h <- merge(mers.0h.mers.3h, dfs$`mers-0h-mers-3h.txt`, all = T)
head(mers.0h.mers.3h)
mers.3h.mers.7h <- data.frame(ID = probes, T1 = 3, T2 = 7)
mers.3h.mers.7h <- merge(mers.3h.mers.7h, dfs$`mers-3h-mers-7h.txt`, all = T)
head(mers.3h.mers.7h)
mers.7h.mers.12h <- data.frame(ID = probes, T1 = 3, T2 = 7)
mers.7h.mers.12h <- merge(mers.7h.mers.12h, dfs$`mers-7h-mers-12h.txt`, all = T)
head(mers.3h.mers.7h)
mers.7h.mers.12h <- data.frame(ID = probes, T1 = 7, T2 = 12)
mers.7h.mers.12h <- merge(mers.7h.mers.12h, dfs$`mers-7h-mers-12h.txt`, all = T)
head(mers.7h.mers.12h)
mers.12h.mers.18h <- data.frame(ID = probes, T1 = 12, T2 = 18)
mers.12h.mers.18h <- merge(mers.12h.mers.18h, dfs$`mers-12h-mers-18h.txt`, all = T)
mers.18h.mers.24h <- data.frame(ID = probes, T1 = 18, T2 = 24)
mers.18h.mers.24h <- merge(mers.18h.mers.24h, dfs$`mers-18h-mers-24h.txt`, all = T)
head(mers.18h.mers.24h)
mers <- do.call(rbind, list(mers.0h.mers.3h, mers.3h.mers.7h, mers.7h.mers.12h, mers.12h.mers.18h, mers.18h.mers.24h))
dim(mers)
head(mers)
unique(mers[,2])
unique(mers[,3])
##### BUILDING THE MOCK MATRIX #####
### 0H VS 3H DATA ###
mock.0h.mock.3h <- data.frame(ID = probes, T1 = 0, T2 = 3)
mock.0h.mock.3h <- merge(mock.0h.mock.3h, dfs$`mock-0h-mock-3h.txt`, all = T)
### 3H VS 7H DATA ###
mock.3h.mock.7h <- data.frame(ID = probes, T1 = 3, T2 = 7)
mock.3h.mock.7h <- merge(mock.3h.mock.7h, dfs$`mock-3h-mock-7h.txt`, all = T)
### 7H VS 12H DATA ###
mock.7h.mock.12h <- data.frame(ID = probes, T1 = 7, T2 = 12)
mock.7h.mock.12h <- merge(mock.7h.mock.12h, dfs$`mock-7h-mock-12h.txt`, all = T)
### 12H VS 18H DATA ###
mock.12h.mock.18h <- data.frame(ID = probes, T1 = 12, T2 = 18)
mock.12h.mock.18h <- merge(mock.12h.mock.18h, dfs$`mock-12h-mock-18h.txt`, all = T)
mock <- do.call(rbind, list(mock.0h.mock.3h, mock.3h.mock.7h, mock.7h.mock.12h, mock.12h.mock.18h))
dim(mock)
dim(mers)
head(mers)
setwd("../")
write.table(mers, "long_GSE56677_Calu3_mersCov.txt", row.names = F, col.names = T, quote = F, sep = "\t")
write.table(mock, "long_GSE56677_Calu3_mock.txt", row.names = F, col.names = T, quote = F, sep = "\t")
