tail(longMers)
tail(longMock)
upInCov1_2 <- read.table("../data_GSE148729_Calu3_totalRNA/results/upInCov1_2.txt")
head(upInCov1_2)
upInCov1_2 <- upInCov1_2[,1]
head(upInCov1_2)
head(longMers)
head(maps)
which(maps$ENSEMBL_GENE_ID %in% upInCov1_2)
head(upInCov1_2)
upInCov1_2 <- sapply(strsplit(upInCov1_2, "\\."), function(x) return(x[1]))
head(upInCov1_2)
which(maps$ENSEMBL_GENE_ID %in% upInCov1_2)
maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov1_2)]
maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov1_2)]
head(longMers)
subsetMers <- longMers[which(longMers$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov1_2)]),]
head(subsetMers)
dim(subsetMers)
table(subsetMers[,1])
subsetMers1 <- longMers[which(longMers$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov1_2)]),]
subsetMers1 <- longMers[which(longMers$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov1_2)]),]
subsetMock1 <- longMock[which(longMock$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov1_2)]),]
rm(subsetMers)
dim(subsetMers1)
dim(subsetMock1)
table(subsetMock[,1])
table(subsetMock1[,1])
length(table(subsetMock1[,1]))
head(subsetMock1)
# Get lines for each gene in mock infection group
lr_mock <- lapply(unique(subsetMock[,1]), function(g) {
timePoints <- subsetMock[grep(g, mock$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
ls()
rm(subsetMers1)
rm(subsetMock1)
subsetMers <- longMers[which(longMers$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov1_2)]),]
subsetMock <- longMock[which(longMock$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov1_2)]),]
# Get lines for each gene in mock infection group
lr_mock <- lapply(unique(subsetMock[,1]), function(g) {
timePoints <- subsetMock[grep(g, mock$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
# Get lines for each gene in mock infection group
lr_mock <- lapply(unique(subsetMock[,1]), function(g) {
timePoints <- subsetMock[grep(g, subsetMock$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mock) <- unique(subsetMock[,1])
lr_mock <- do.call(rbind, lr_mock)
colnames(lr_mock) <- c("mock_slope", "mock_yInt")
head(lr_mock)
# Get lines for each gene in mers infection group
lr_mers <- lapply(unique(subsetMers[,1]), function(g) {
timePoints <- subsetMers[grep(g, subsetMers$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mers) <- unique(subsetMers[,1])
lr_mers <- do.call(rbind, lr_mers)
colnames(lr_mers) <- c("mers_slope", "mers_yInt")
dim(lr_mers)
dim(lr_mock)
lr_mock
lr_mers
lr_mock
row.names(lr_mers) == row.names(lr_mock)
row.names(lr_mers) != row.names(lr_mock)
which(row.names(lr_mers) != row.names(lr_mock))
df <- rbind(lr_mers, lr_mock)
head(df)
df <- cbind(lr_mers, lr_mock)
head(df)
which(apply(df, 1, function(x) {
if (x[,1] >= 0 && x[,3] < 0) {
return(T)
} else {
return(F)
}
}))
which(apply(df, 1, function(x) {
if (x[1] >= 0 && x[3] < 0) {
return(T)
} else {
return(F)
}
}))
names(which(apply(df, 1, function(x) {
if (x[1] >= 0 && x[3] < 0) {
return(T)
} else {
return(F)
}
})))
which(maps$ID %in% names(which(apply(df, 1, function(x) {
if (x[1] >= 0 && x[3] < 0) {
return(T)
} else {
return(F)
}
}))))
maps$ENSEMBL_GENE_ID[which(maps$ID %in% names(which(apply(df, 1, function(x) {
if (x[1] >= 0 && x[3] < 0) {
return(T)
} else {
return(F)
}
}))))]
upInAllCov <- maps$ENSEMBL_GENE_ID[which(maps$ID %in% names(which(apply(df, 1, function(x) {
if (x[1] >= 0 && x[3] < 0) {
return(T)
} else {
return(F)
}
}))))]
cat(upInAllCov)
cat(upInAllCov, sep = "\n")
write.table(upInAllCov, "upInAllCov.txt", row.names = F, col.names = F, quote = F)
upInAllCov
upInCov2 <- read.table("../data_GSE148729_Calu3_totalRNA/results/upInCov2.txt")
upInCov2 <- upInCov2[,1]
upInCov2 <- sapply(strsplit(upInCov2, "\\."), function(x) return(x[1]))
upInCov2
subsetMers <- longMers[which(longMers$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov2)]),]
subsetMock <- longMock[which(longMock$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov2)]),]
subsetMers
subsetMers <- longMers[which(longMers$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov2)]),]
subsetMock <- longMock[which(longMock$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov2)]),]
# Get lines for each gene in mock infection group
lr_mock <- lapply(unique(subsetMock[,1]), function(g) {
timePoints <- subsetMock[grep(g, subsetMock$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mock) <- unique(subsetMock[,1])
lr_mock <- do.call(rbind, lr_mock)
colnames(lr_mock) <- c("mock_slope", "mock_yInt")
# Get lines for each gene in mers infection group
lr_mers <- lapply(unique(subsetMers[,1]), function(g) {
timePoints <- subsetMers[grep(g, subsetMers$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mers) <- unique(subsetMers[,1])
lr_mers <- do.call(rbind, lr_mers)
colnames(lr_mers) <- c("mers_slope", "mers_yInt")
df <- cbind(lr_mers, lr_mock)
df
upInCov2_mers <- maps$ENSEMBL_GENE_ID[which(maps$ID %in% names(which(apply(df, 1, function(x) {
if (x[1] >= 0 && x[3] < 0) {
return(T)
} else {
return(F)
}
}))))]
upInCov2_mers
df
cat(upInCov2, sep = "\n")
cat(upInCov2, sep = "\n")
############### Finding genes that are down-regulated in mers AND Cov1 and Cov2, and up-regulated in mock infections
downInCov1_2 <- read.table("../data_GSE148729_Calu3_totalRNA/results/downInCov1_2.txt")
downInCov1_2 <- downInCov1_2[,1]
downInCov1_2 <- sapply(strsplit(downInCov1_2, "\\."), function(x) return(x[1]))
downInCov1_2
cat(downInCov1_2, sep = "\n")
subsetMers <- longMers[which(longMers$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov2)]),]
subsetMock <- longMock[which(longMock$Gene %in% maps$ID[which(maps$ENSEMBL_GENE_ID %in% upInCov2)]),]
subsetMers
# Get lines for each gene in mock infection group
lr_mock <- lapply(unique(subsetMock[,1]), function(g) {
timePoints <- subsetMock[grep(g, subsetMock$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mock) <- unique(subsetMock[,1])
lr_mock <- do.call(rbind, lr_mock)
colnames(lr_mock) <- c("mock_slope", "mock_yInt")
# Get lines for each gene in mers infection group
lr_mers <- lapply(unique(subsetMers[,1]), function(g) {
timePoints <- subsetMers[grep(g, subsetMers$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mers) <- unique(subsetMers[,1])
lr_mers <- do.call(rbind, lr_mers)
colnames(lr_mers) <- c("mers_slope", "mers_yInt")
df <- cbind(lr_mers, lr_mock)
df
downInAll <- maps$ENSEMBL_GENE_ID[which(maps$ID %in% names(which(apply(df, 1, function(x) {
if (x[1] <= 0 && x[3] > 0) {
return(T)
} else {
return(F)
}
}))))]
downInAll
setwd("/home/zuhaib/Desktop/covid19Research/geneResponseApp/geneExpressionResponse/theApp/data_GSE56677_Calu3/")
mers <- read.table("./long_GSE56677_Calu3_mersCov.txt", header = T, sep = "\t")
mock <- read.table("./long_GSE56677_Calu3_mock.txt", header = T, sep = "\t")
rm(list=ls())
mers <- read.table("./long_GSE56677_Calu3_mersCov.txt", header = T, sep = "\t")
mock <- read.table("./long_GSE56677_Calu3_mock.txt", header = T, sep = "\t")
head(mers)
head(mock)
dim(mers)
dim(mock)
head(mers[,1])
tail(mers[,1])
sampl(mers[,1], 10)
sample(mers[,1], 10)
grep("A_33_P3245660", mers[,1])
mers[grep("A_33_P3245660", mers[,1]),]
row.names(mers[grep("A_33_P3245660", mers[,1]),])
as.integer(row.names(mers[grep("A_33_P3245660", mers[,1]),]))
vec <- as.integer(row.names(mers[grep("A_33_P3245660", mers[,1]),]))
vec
vec - c(vec[-1], vec[5])
c(vec[-1], vec[5]) - vec
vec
num <- c(vec[-1], vec[5]) - vec
num <- num[1]
num
mers[c(23, 23 + num, 23 + 2*num, 23 + 3*num, 23 + 4*num),]
mers[c(145, 145 + num, 145 + 2*num, 145 + 3*num, 145 + 4*num),]
mers[num,]
mers[1,]
mers[num + 1,]
lr_mers <- lapply(1:10, function(g) {
timePoints <- mers[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mers) <- mers[1:10,1]
lr_mers <- do.call(rbind, lr_mers)
colnames(lr_mers) <- c("mock_slope", "mock_yInt")
lr_mers
lr_mers <- lapply(1:10, function(g) {
timePoints <- mers[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
lr_mers
g <- 3
timePoints <- mers[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
timePoints
minTimePoint <- timePoints[1,2]
minTimePoint
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
x
y
theModel <- lm(y~x)
theModel
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
rm(list=ls())
mers <- read.table("./long_GSE56677_Calu3_mersCov.txt", header = T, sep = "\t")
mock <- read.table("./long_GSE56677_Calu3_mock.txt", header = T, sep = "\t")
vec <- as.integer(row.names(mers[grep("A_33_P3245660", mers[,1]),]))
num <- c(vec[-1], vec[5]) - vec
num <- num[1]
lr_mers <- lapply(1:num, function(g) {
timePoints <- mers[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
lr_mers <- lapply(1:num, function(g) {
timePoints <- mers[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mers) <- mers[1:10,1]
lr_mers <- do.call(rbind, lr_mers)
colnames(lr_mers) <- c("mock_slope", "mock_yInt")
dim(lr_mers)
head(lr_mers)
colnames(lr_mers) <- c("mers_slope", "mers_yInt")
head(lr_mers)
lr_mock <- lapply(1:num, function(g) {
timePoints <- mock[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mock) <- mock[1:10,1]
lr_mock <- do.call(rbind, lr_mock)
colnames(lr_mock) <- c("mock_slope", "mock_yInt")
head(lr_mock)
retDF <- cbind(lr_mers, lr_mock)
head(retDF)
head(retDF)
dfUp <- apply(retDF, 1, function(x) {
if ((x[1] >= 0 && x[3] < 0) || x([1] <= 0 && x[3] > 0)) {
return(T)
} else {
return(F)
}
})
dfUp <- apply(retDF, 1, function(x) {
if (((x[1] >= 0) && (x[3] < 0)) || (x([1] <= 0) && (x[3] > 0))) {
return(T)
} else {
return(F)
}
})
dfUp <- apply(retDF, 1, function(x) {
if (((x[1] >= 0) && (x[3] < 0)) || (x([1] <= 0) && (x[3] > 0))) {
return(T)
} else {
return(F)
}
})
head(retDF)
dfUp <- apply(retDF, 1, function(x) {
return(x[1])
# if (((x[1] >= 0) && (x[3] < 0)) || (x([1] <= 0) && (x[3] > 0))) {
#   return(T)
# } else {
#   return(F)
# }
})
head(dfUp)
dfUp <- apply(retDF, 1, function(x) {
if (((x[1] >= 0) && (x[3] < 0)) || (x([1] <= 0) && (x[3] > 0))) {
return(T)
} else {
return(F)
}
})
dfUp <- apply(retDF, 1, function(x) {
if (((x[1] >= 0) && (x[3] < 0)) || (x[1] <= 0) && (x[3] > 0))) {
return(T)
} else {
return(F)
}
})
dfUp <- apply(retDF, 1, function(x) {
if (((x[1] >= 0) && (x[3] < 0)) || (x[1] <= 0) && (x[3] > 0))) {
return(T)
} else {
return(F)
}
})
dfUp <- apply(retDF, 1, function(x) {
if (((x[1] >= 0) && (x[3] < 0)) || (x[1] <= 0) && (x[3] > 0)) {
return(T)
} else {
return(F)
}
})
head(dfUp)
which(head(dfUp))
which(head(dfUp))
head(dfUp)
dfUp <- retDF[which(apply(retDF, 1, function(x) {
if (((x[1] >= 0) && (x[3] < 0)) || (x[1] <= 0) && (x[3] > 0)) {
return(T)
} else {
return(F)
}
})),]
dim(dfUp)
head(dfUp)
length(which(duplicated(retDF[,1])))
head(mers)
length(which(duplicated(mers[1:num,1])))
rm(list=ls())
rm(list=ls())
setwd("/home/zuhaib/Desktop/covid19Research/geneResponseApp/geneExpressionResponse/theApp/data_GSE56677_Calu3/")
mers <- read.table("./long_GSE56677_Calu3_mersCov.txt", header = T, sep = "\t")
mock <- read.table("./long_GSE56677_Calu3_mock.txt", header = T, sep = "\t")
vec <- as.integer(row.names(mers[grep("A_33_P3245660", mers[,1]),]))
num <- c(vec[-1], vec[5]) - vec
num <- num[1]
lr_mers <- lapply(1:num, function(g) {
timePoints <- mers[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mers) <- mers[1:10,1]
lr_mers <- do.call(rbind, lr_mers)
colnames(lr_mers) <- c("mers_slope", "mers_yInt")
lr_mock <- lapply(1:num, function(g) {
timePoints <- mock[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mock) <- mock[1:10,1]
lr_mock <- do.call(rbind, lr_mock)
colnames(lr_mock) <- c("mock2_slope", "mock2_yInt")
retDF <- cbind(lr_mers, lr_mock)
dim(retDF)
head(retDF)
dfUp <- retDF[which(apply(retDF, 1, function(x) {
if (((x[1] >= 0) && (x[3] < 0)) || (x[1] <= 0) && (x[3] > 0)) {
return(T)
} else {
return(F)
}
})),]
head(dfUp)
dim(retDF0)
dim(retDF)
dim(dfUp)
head(retDF)
write.table(retDF, "leastSquaresLinesPerGenePerInfections.txt", row.names = T, col.names = T, quote = F)
write.table(retDF, "leastSquaresLinesPerGenePerInfections.txt", row.names = T, col.names = T, quote = F, sep = "\t")
head(retDF, 50)
lr_mers <- lapply(1:num, function(g) {
timePoints <- mers[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mers) <- mers[,1]
lr_mers <- do.call(rbind, lr_mers)
colnames(lr_mers) <- c("mers_slope", "mers_yInt")
lr_mock <- lapply(1:num, function(g) {
timePoints <- mock[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mock) <- mock[,1]
lr_mock <- do.call(rbind, lr_mock)
colnames(lr_mock) <- c("mock2_slope", "mock2_yInt")
retDF <- cbind(lr_mers, lr_mock)
head(lr_mock)
head(mock)
names(lr_mock) <- mock[,1]
names(lr_mock) <- mock[1:num,1]
lr_mock <- do.call(rbind, lr_mock)
colnames(lr_mock) <- c("mock2_slope", "mock2_yInt")
lr_mock <- lapply(1:num, function(g) {
timePoints <- mock[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mock) <- mock[1:num,1]
lr_mock <- do.call(rbind, lr_mock)
colnames(lr_mock) <- c("mock2_slope", "mock2_yInt")
lr_mers <- lapply(1:num, function(g) {
timePoints <- mers[c(g, g + num, g + 2*num, g + 3*num, g + 4*num),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
names(lr_mers) <- mers[1:num,1]
lr_mers <- do.call(rbind, lr_mers)
colnames(lr_mers) <- c("mers_slope", "mers_yInt")
head(lr_mock)
head(lr_mers)
retDF <- cbind(lr_mers, lr_mock)
head(retDF)
write.table(retDF, "leastSquaresLinesPerGenePerInfections.txt", row.names = T, col.names = T, quote = F, sep = "\t")
