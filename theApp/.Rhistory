runApp()
runApp()
lapply(mappings, head)
grep("ACE2", mappings[[1]][,3])
mappings[[1][grep("ACE2", mappings[[1]][,3]),]
mappings[[1]][grep("ACE2", mappings[[1]][,3]),]
mappings[[2]][grep("ACE2", mappings[[2]][,2]),]
ds <- datasets[[2]]
head(ds)
mappings[[1]][grep("ACE2", mappings[[1]][,3]),]
#genesOfInterest <- strsplit(input$selGenes, split = '[\r\n]')[[1]]
genesOfInterest <- c("ACE2", "BACE2")
head(mappings[[2]])
selectedIDType <- "ENTREZ_ID"
dataset_primaryID <- "ensembl"
lst <- lapply(genesOfInterest, function(x) {
# First, map the users query genes to the gene IDs present in their dataset of interest
m <- mappings[[dataset_primaryID]]
g <- unique(m[grep(paste0("^", x, "$"), m[selectedIDType]),1])
retLst <- lapply(g, function(z) {
ret <- ds[grep(paste0("^", z, "$"), ds[,1]),]
if (nrow(ret) == 0) {
return(NA)
} else {
ret[,1] <- x
return(ret)
}
})
retLst <- retLst[which(!(is.na(retLst)))]
#print(retLst)
if (length(retLst) == 0) {
return(NA)
} else {
return(retLst)
}
})
lst
dataset_primaryID
head(mappings[[dataset_primaryID]])
unique(m[grep(paste0("^", x, "$"), mappings[[dataset_primaryID]][selectedIDType]),1])
unique(mappings[[dataset_primaryID]][grep(paste0("^", x, "$"), mappings[[dataset_primaryID]][selectedIDType]),1])
unique(mappings[[dataset_primaryID]][grep(paste0("^", "ACE2", "$"), mappings[[dataset_primaryID]][selectedIDType]),1])
m <- mappings[[dataset_primaryID]]
head(m)
g <- unique(m[grep(paste0("^", x, "$"), m[selectedIDType]),1])
g <- unique(m[grep(paste0("^", "ACE2", "$"), m[selectedIDType]),1])
g
grep(paste0("^", "ACE2", "$"), m[selectedIDType])
head(m[selectedIDType])
head(m)
selectedIDType <- "GENE_SYMBOL"
dataset_primaryID <- "ensembl"
m <- mappings[[dataset_primaryID]]
g <- unique(m[grep(paste0("^", "ACE2", "$"), m[selectedIDType]),1])
g
head(m[selectedIDType])
grep(paste0("^", "ACE2", "$"), m[selectedIDType])
grep("ACE2", m[selectedIDType])
grep("ACE2", m[[selectedIDType]])
grep(paste0("^", "ACE2", "$"), m[[selectedIDType]])
g <- unique(m[grep(paste0("^", "ACE2", "$"), m[[selectedIDType]]),1])
g
rm(m)
rm(g)
lst <- lapply(genesOfInterest, function(x) {
# First, map the users query genes to the gene IDs present in their dataset of interest
m <- mappings[[dataset_primaryID]]
g <- unique(m[grep(paste0("^", x, "$"), m[[selectedIDType]]),1])
retLst <- lapply(g, function(z) {
ret <- ds[grep(paste0("^", z, "$"), ds[,1]),]
if (nrow(ret) == 0) {
return(NA)
} else {
ret[,1] <- x
return(ret)
}
})
retLst <- retLst[which(!(is.na(retLst)))]
#print(retLst)
if (length(retLst) == 0) {
return(NA)
} else {
return(retLst)
}
})
lst
#genesOfInterest <- strsplit(input$selGenes, split = '[\r\n]')[[1]]
genesOfInterest <- c("ACE2", "randomGene", "BACE2")
selectedIDType <- "GENE_SYMBOL"
dataset_primaryID <- "ensembl"
lst <- lapply(genesOfInterest, function(x) {
# First, map the users query genes to the gene IDs present in their dataset of interest
m <- mappings[[dataset_primaryID]]
g <- unique(m[grep(paste0("^", x, "$"), m[[selectedIDType]]),1])
retLst <- lapply(g, function(z) {
ret <- ds[grep(paste0("^", z, "$"), ds[,1]),]
if (nrow(ret) == 0) {
return(NA)
} else {
ret[,1] <- x
return(ret)
}
})
retLst <- retLst[which(!(is.na(retLst)))]
#print(retLst)
if (length(retLst) == 0) {
return(NA)
} else {
return(retLst)
}
})
lst
genesNotFound <- genesOfInterest[which(is.na(lst))]
genesNotFound
lst <- lst[which(!is.na(lst))]
lst
lst <- unlist(lst, recursive = F)
lst
ls()
rm(list=ls())
runApp()
ds <- datasets[[2]]
setwd("/home/zuhaib/Desktop/covid19Research/geneResponseApp/geneExpressionResponse/theApp")
# Reads in the long_ files
fls <- unlist(lapply(list.files()[grep("data_", list.files())], function(d) {
path <- paste0("./", d, "/")
filesInDir <- list.files(path)
return(paste0(path, filesInDir[grep("long_", filesInDir)]))
}))
datasets <- lapply(fls, function(x) {
read.table(x, header = T, sep = "\t")
})
names(datasets) <- fls
names(datasets) <- str_replace_all(names(datasets), "\\.txt", "")
names(datasets) <- str_replace_all(names(datasets), "\\..+long_", "")
# Need to remove the decimal part of the GSE148729 dataset gene IDs, to make it easier to search
datasets$GSE148729_Calu3_mockInfection$Gene <-  str_replace_all(datasets$GSE148729_Calu3_mockInfection$Gene, "\\..*", "")
datasets$GSE148729_Calu3_sarsCov1$Gene <- str_replace_all(datasets$GSE148729_Calu3_sarsCov1$Gene, "\\..*", "")
datasets$GSE148729_Calu3_sarsCov2$Gene <- str_replace_all(datasets$GSE148729_Calu3_sarsCov2$Gene, "\\..*", "")
# Reads in the normalized expression data
fls2 <- unlist(lapply(list.files()[grep("data_", list.files())], function(d) {
path <- paste0("./", d, "/")
filesInDir <- list.files(path)
return(paste0(path, filesInDir[grep("normalized_", filesInDir)]))
}))
normData <- lapply(fls2, function(x) {
read.table(x, header = T, sep = "\t")
})
names(normData) <- fls2
names(normData) <- str_replace_all(names(normData), "\\.txt", "")
names(normData) <- str_replace_all(names(normData), "\\..+normalized_", "")
fls3 <- paste0("./geneMappings/", list.files("./geneMappings")[grep("mappings_", list.files("./geneMappings"))])
mappings <- lapply(fls3, function(x) {
read.table(x, header = T, sep = "\t")
})
names(mappings) <- fls3
names(mappings) <- str_replace_all(names(mappings), "\\.txt", "")
names(mappings) <- str_replace_all(names(mappings), "\\..+mappings_", "")
# Reads in file specifying which samples correspond to which columns in the normalized data.
# This is the help disply the desired data in tabular format
groupToColumns <- read.table("groupToColumns.txt", header = T, sep = "\t")
groupToColumns$File <- str_replace_all(groupToColumns$File, "\\.txt", "")
groupToColumns$File <- str_replace_all(groupToColumns$File, ".+normalized_", "")
ds <- datasets[[2]]
#genesOfInterest <- strsplit(input$selGenes, split = '[\r\n]')[[1]]
genesOfInterest <- c("ACE2", "randomGene", "BACE2", "DDT")
selectedIDType <- "GENE_SYMBOL"
dataset_primaryID <- "ensembl"
lst <- lapply(genesOfInterest, function(x) {
# First, map the users query genes to the gene IDs present in their dataset of interest
m <- mappings[[dataset_primaryID]]
g <- unique(m[grep(paste0("^", x, "$"), m[[selectedIDType]]),1])
retLst <- lapply(g, function(z) {
ret <- ds[grep(paste0("^", z, "$"), ds[,1]),]
if (nrow(ret) == 0) {
return(NA)
} else {
ret[,1] <- x
return(ret)
}
})
retLst <- retLst[which(!(is.na(retLst)))]
#print(retLst)
if (length(retLst) == 0) {
return(NA)
} else {
return(retLst)
}
})
lst
names(datasets)
ds <- datasets[[4]]
#genesOfInterest <- strsplit(input$selGenes, split = '[\r\n]')[[1]]
genesOfInterest <- c("ACE2", "randomGene", "BACE2", "DDT")
selectedIDType <- "GENE_SYMBOL"
dataset_primaryID <- "ensembl"
lst <- lapply(genesOfInterest, function(x) {
# First, map the users query genes to the gene IDs present in their dataset of interest
m <- mappings[[dataset_primaryID]]
g <- unique(m[grep(paste0("^", x, "$"), m[[selectedIDType]]),1])
retLst <- lapply(g, function(z) {
ret <- ds[grep(paste0("^", z, "$"), ds[,1]),]
if (nrow(ret) == 0) {
return(NA)
} else {
ret[,1] <- x
return(ret)
}
})
retLst <- retLst[which(!(is.na(retLst)))]
#print(retLst)
if (length(retLst) == 0) {
return(NA)
} else {
return(retLst)
}
})
lst
head(mappings[[dataset_primaryID]])
m <- mappings[[dataset_primaryID]]
g <- unique(m[grep(paste0("^", x, "$"), m[[selectedIDType]]),1])
g <- unique(m[grep(paste0("^", "ACE2", "$"), m[[selectedIDType]]),1])
g
g <- unique(m[grep(paste0("^", "BACE2", "$"), m[[selectedIDType]]),1])
g
g <- unique(m[grep(paste0("^", "DDT", "$"), m[[selectedIDType]]),1])
g
head(which(duplicated(mappings$ensembl$GENE_SYMBOL)))
mappings$ensembl[head(which(duplicated(mappings$ensembl$GENE_SYMBOL))),]
grep("RABGAP1", mappings$ensembl$GENE_SYMBOL)
mappings$ensembl[grep("RABGAP1", mappings$ensembl$GENE_SYMBOL),]
mappings$ensembl[grep("DDT", mappings$ensembl$GENE_SYMBOL),]
head(which(duplicated(mappings$ensembl$GENE_SYMBOL)), 30)
mappings$ensembl[head(which(duplicated(mappings$ensembl$GENE_SYMBOL)), 30),]
mappings$ensembl[grep("APOBEC3A", mappings$ensembl$GENE_SYMBOL),]
mappings$ensembl[grep("GALNT8", mappings$ensembl$GENE_SYMBOL),]
mappings$ensembl[grep("USP4", mappings$ensembl$GENE_SYMBOL),]
mappings$ensembl[grep("EDEM2", mappings$ensembl$GENE_SYMBOL),]
#genesOfInterest <- strsplit(input$selGenes, split = '[\r\n]')[[1]]
genesOfInterest <- c("6013")
selectedIDType <- "ENTREZ_ID"
dataset_primaryID <- "ensembl"
m <- mappings[[dataset_primaryID]]
head(m)
g <- unique(m[grep(paste0("^", 6013, "$"), m[[selectedIDType]]),1])
g
lst <- lapply(genesOfInterest, function(x) {
# First, map the users query genes to the gene IDs present in their dataset of interest
m <- mappings[[dataset_primaryID]]
g <- unique(m[grep(paste0("^", x, "$"), m[[selectedIDType]]),1])
retLst <- lapply(g, function(z) {
ret <- ds[grep(paste0("^", z, "$"), ds[,1]),]
if (nrow(ret) == 0) {
return(NA)
} else {
ret[,1] <- x
return(ret)
}
})
retLst <- retLst[which(!(is.na(retLst)))]
#print(retLst)
if (length(retLst) == 0) {
return(NA)
} else {
return(retLst)
}
})
lst
m <- mappings[[dataset_primaryID]]
g <- unique(m[grep(paste0("^", 6013, "$"), m[[selectedIDType]]),1])
g
ds <- datasets[[2]]
lst <- lapply(genesOfInterest, function(x) {
# First, map the users query genes to the gene IDs present in their dataset of interest
m <- mappings[[dataset_primaryID]]
g <- unique(m[grep(paste0("^", x, "$"), m[[selectedIDType]]),1])
retLst <- lapply(g, function(z) {
ret <- ds[grep(paste0("^", z, "$"), ds[,1]),]
if (nrow(ret) == 0) {
return(NA)
} else {
ret[,1] <- x
return(ret)
}
})
retLst <- retLst[which(!(is.na(retLst)))]
#print(retLst)
if (length(retLst) == 0) {
return(NA)
} else {
return(retLst)
}
})
lst
rm(list=ls())
rm(list=ls())
runApp()
ls()
data.frame(c(1), c(2))
unlist(list(data.frame(1:3,4:6), list(list(1:4), list(LETTERS)), list(1:10)), recursive = F)
setwd("/home/zuhaib/Desktop/covid19Research/geneResponseApp/geneExpressionResponse/theApp")
# Reads in the long_ files
fls <- unlist(lapply(list.files()[grep("data_", list.files())], function(d) {
path <- paste0("./", d, "/")
filesInDir <- list.files(path)
return(paste0(path, filesInDir[grep("long_", filesInDir)]))
}))
datasets <- lapply(fls, function(x) {
read.table(x, header = T, sep = "\t")
})
names(datasets) <- fls
names(datasets) <- str_replace_all(names(datasets), "\\.txt", "")
names(datasets) <- str_replace_all(names(datasets), "\\..+long_", "")
# Need to remove the decimal part of the GSE148729 dataset gene IDs, to make it easier to search
datasets$GSE148729_Calu3_mockInfection$Gene <-  str_replace_all(datasets$GSE148729_Calu3_mockInfection$Gene, "\\..*", "")
datasets$GSE148729_Calu3_sarsCov1$Gene <- str_replace_all(datasets$GSE148729_Calu3_sarsCov1$Gene, "\\..*", "")
datasets$GSE148729_Calu3_sarsCov2$Gene <- str_replace_all(datasets$GSE148729_Calu3_sarsCov2$Gene, "\\..*", "")
# Reads in the normalized expression data
fls2 <- unlist(lapply(list.files()[grep("data_", list.files())], function(d) {
path <- paste0("./", d, "/")
filesInDir <- list.files(path)
return(paste0(path, filesInDir[grep("normalized_", filesInDir)]))
}))
normData <- lapply(fls2, function(x) {
read.table(x, header = T, sep = "\t")
})
names(normData) <- fls2
names(normData) <- str_replace_all(names(normData), "\\.txt", "")
names(normData) <- str_replace_all(names(normData), "\\..+normalized_", "")
fls3 <- paste0("./geneMappings/", list.files("./geneMappings")[grep("mappings_", list.files("./geneMappings"))])
mappings <- lapply(fls3, function(x) {
read.table(x, header = T, sep = "\t")
})
names(mappings) <- fls3
names(mappings) <- str_replace_all(names(mappings), "\\.txt", "")
names(mappings) <- str_replace_all(names(mappings), "\\..+mappings_", "")
# Reads in file specifying which samples correspond to which columns in the normalized data.
# This is the help disply the desired data in tabular format
groupToColumns <- read.table("groupToColumns.txt", header = T, sep = "\t")
groupToColumns$File <- str_replace_all(groupToColumns$File, "\\.txt", "")
groupToColumns$File <- str_replace_all(groupToColumns$File, ".+normalized_", "")
head(mappings$ensembl)
which(mappings$ensembl$GENE_SYMBOL %in% c("ACE2", "BACE2", "DDT"))
mappings$ensembl$GENE_SYMBOL[which(mappings$ensembl$GENE_SYMBOL %in% c("ACE2", "BACE2", "DDT")),]
mappings$ensembl$ENSEMBL_GENE_ID[which(mappings$ensembl$GENE_SYMBOL %in% c("ACE2", "BACE2", "DDT"))]
mappings$ensembl[which(mappings$ensembl$GENE_SYMBOL %in% c("ACE2", "BACE2", "DDT")), 1:2]
adf <- mappings$ensembl[which(mappings$ensembl$GENE_SYMBOL %in% c("ACE2", "BACE2", "DDT")), 1:2]
adf
adf <- adf[,2:1]
adf
head(datasets$GSE148729_Calu3_sarsCov2)
head(adf)
bdf <- merge(adf, datasets$GSE148729_Calu3_sarsCov2, by.x = "ENSEMBL_GENE_ID", by.y = "Gene")
dim(bdf)
head(bdf)
head(normData$GSE56677)
head(normData$GSE148729)
head(normData$GSE148729)
bdf <- merge(adf, normData$GSE148729, by.x = "ENSEMBL_GENE_ID", by.y = "geneID")
bdf
adf
head(normData$GSE148729)
normData$GSE148729$geneID <- str_replace_all(normData$GSE148729$geneID, "\\..*", "")
head(normData$GSE148729)
bdf <- merge(adf, normData$GSE148729, by.x = "ENSEMBL_GENE_ID", by.y = "geneID")
bdf
bdf <- merge(normData$GSE148729, adf, by.y = "ENSEMBL_GENE_ID", by.x = "geneID")
bdf
bdf <- merge(adf, normData$GSE148729, by.x = "ENSEMBL_GENE_ID", by.y = "geneID")
bdf
names(adf)
names(normData$GSE148729)
names(normData$GSE148729)[1]
names(normData$GSE148729)[[1]]
bdf
runApp()
rmlist=ls())
rm(list=ls())
runApp()
runApp()
runApp()
install.packages("DT")
library(DT)
library(DT)
datatable(data.frame(1:3, 4:6))
runApp()
runApp()
htmltools::tags$caption("Hello World")
datatable(data.frame(LETTERS[1:5], 1:5), caption = htmltools::tags$caption("Hello World"))
datatable(data.frame(LETTERS[1:5], 1:5), caption = htmltools::tags$caption(style = 'caption-side: top; text-align: center; color:black; font-size:200% ;', "Hello World"))
datatable(data.frame(LETTERS[1:5], 1:5), caption = htmltools::tags$caption(style = 'caption-side: top; text-align: left; color:black; font-size:200% ;', "Hello World"))
datatable(data.frame(LETTERS[1:5], 1:5), caption = htmltools::tags$caption(style = 'caption-side: top; text-align: left; color:black; font-size:100% ;', "Hello World"))
datatable(data.frame(LETTERS[1:5], 1:5), caption = htmltools::tags$caption(style = 'caption-side: top; text-align: left; color:black; font-size:150% ;', "Hello World"))
runApp()
adf <- mappings$ensembl[which(mappings$ensembl$GENE_SYMBOL %in% c("ACE2", "BACE2", "DDT")), 1:2]
setwd("/home/zuhaib/Desktop/covid19Research/geneResponseApp/geneExpressionResponse/theApp")
# Reads in the long_ files
fls <- unlist(lapply(list.files()[grep("data_", list.files())], function(d) {
path <- paste0("./", d, "/")
filesInDir <- list.files(path)
return(paste0(path, filesInDir[grep("long_", filesInDir)]))
}))
datasets <- lapply(fls, function(x) {
read.table(x, header = T, sep = "\t")
})
names(datasets) <- fls
names(datasets) <- str_replace_all(names(datasets), "\\.txt", "")
names(datasets) <- str_replace_all(names(datasets), "\\..+long_", "")
# Need to remove the decimal part of the GSE148729 dataset gene IDs, to make it easier to search
datasets$GSE148729_Calu3_mockInfection$Gene <-  str_replace_all(datasets$GSE148729_Calu3_mockInfection$Gene, "\\..*", "")
datasets$GSE148729_Calu3_sarsCov1$Gene <- str_replace_all(datasets$GSE148729_Calu3_sarsCov1$Gene, "\\..*", "")
datasets$GSE148729_Calu3_sarsCov2$Gene <- str_replace_all(datasets$GSE148729_Calu3_sarsCov2$Gene, "\\..*", "")
# Reads in the normalized expression data
fls2 <- unlist(lapply(list.files()[grep("data_", list.files())], function(d) {
path <- paste0("./", d, "/")
filesInDir <- list.files(path)
return(paste0(path, filesInDir[grep("normalized_", filesInDir)]))
}))
normData <- lapply(fls2, function(x) {
read.table(x, header = T, sep = "\t")
})
names(normData) <- fls2
names(normData) <- str_replace_all(names(normData), "\\.txt", "")
names(normData) <- str_replace_all(names(normData), "\\..+normalized_", "")
normData$GSE148729$geneID <- str_replace_all(normData$GSE148729$geneID, "\\..*", "")
fls3 <- paste0("./geneMappings/", list.files("./geneMappings")[grep("mappings_", list.files("./geneMappings"))])
mappings <- lapply(fls3, function(x) {
read.table(x, header = T, sep = "\t")
})
names(mappings) <- fls3
names(mappings) <- str_replace_all(names(mappings), "\\.txt", "")
names(mappings) <- str_replace_all(names(mappings), "\\..+mappings_", "")
# Reads in file specifying which samples correspond to which columns in the normalized data.
# This is the help disply the desired data in tabular format
groupToColumns <- read.table("groupToColumns.txt", header = T, sep = "\t")
groupToColumns$File <- str_replace_all(groupToColumns$File, "\\.txt", "")
groupToColumns$File <- str_replace_all(groupToColumns$File, ".+normalized_", "")
adf <- mappings$ensembl[which(mappings$ensembl$GENE_SYMBOL %in% c("ACE2", "BACE2", "DDT")), 1:2]
adf <- adf[,2:1]
bdf <- merge(adf, normData$GSE148729, by.x = "ENSEMBL_GENE_ID", by.y = "geneID")
bdf
adf
mappings$ensembl[2110:2115,]
rm(list=ls())
runApp()
runApp()
install.packages("reshape2")
library(reshape2)
install.packages("reshape")
library(reshape)
library(reshape)
options(repos = BiocManager::repositories())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste("hello", "world", sep="<br/>")
HTML(paste("hello", "world", sep="<br/>"))
runApp()
HTML("This is an exploratory tool for analyzing changes in human gene expression upon infection by different Coronaviruses (and mock infections).<br/>
The tool accepts user IDs in the form of Entrez, Ensembl, or HGNC gene IDs, in addition to the datasets the user would like to observe. The output has three parts: The window above returns any genes that weren\'t found in the selected datases,
The Plots tab shows log2foldchanges from one time point to the next, as measured in the dataset. The Tables tab shows the (quantile normalized) data.<br/>
Each plot will show one line for each gene in the dataset; allowing the user to observe the log2foldchanges relative to the first measured timepoint in the experiment. A black dod indicates that the fold change was statistically significant, and yellow dot indicates that it was not.<br/>
However, simply looking at the plots will not give the whole story. A log2foldchange not being statistically significant doesn\'t imply that there wasn\'t a significant change between the two time points (It could just be the sample sizes are small, for example). For this purpose,
the Tables tab shows the actual data, so the user may explore the data further. It also whows the mappings between the user\'s input IDs, and the IDs present in the dataset of interest. Note: due to the difficuly of mapping between IDs, some user IDs may map to more than one of the dataset IDs, and vice versa.
The mappings were done using the biomaRt package in R.")
runApp()
runApp()
runApp()
paste(c("This is the intro paragraph",
"This is paragraph 2",
"This isn't a body paragraph. It's the concluding paragraph"), collapse = "<br>")
runApp()
runApp()
runApp()
HTML(paste(retVec, sep = "<br/>"))
retVec <- c("This is the intro paragraph",
"This is paragraph 2",
"This isn't a body paragraph. It's the concluding paragraph")
retVec
HTML(paste(retVec, sep = "<br/>"))
HTML(paste(retVec[1], retVec[2], retVec[3], sep = "<br/>"))
runApp()
rm(retVec)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
options(repos = BiocManager::repositories())
rm(list=ls())
