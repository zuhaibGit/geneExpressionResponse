lst_annots <- lapply(lst_logs, function(x) {
return(getGOTerms(x, exprmntCodes))
})
lst_annots[[1]]
lapply(lst_annots, length)
unlist(lapply(lst_annots, length))
unlist(lst_annots)
table(unlist(lst_annots))
sort(table(unlist(lst_annots)), decreasing = T)
sort(table(unlist(lst_annots)), decreasing = T)
plot(1:100, sort(table(unlist(lst_annots)), decreasing = T))
plot(length(sort(table(unlist(lst_annots)), decreasing = T)), sort(table(unlist(lst_annots)), decreasing = T))
plot(1:length(sort(table(unlist(lst_annots)), decreasing = T)), sort(table(unlist(lst_annots)), decreasing = T))
plot(1:100, sort(table(unlist(lst_annots)), decreasing = T))
sort(table(unlist(lst_annots)), decreasing = T)
unlist(lst_annots)
unique(unlist(lst_annots))
# Implementation of the ECLaT algorithm for frequent itemset mining
vert <- unique(unlist(lst_annots))
sort(table(unlist(lst_annots)), decreasing = T)
# Implementation of the ECLaT algorithm for frequent itemset mining
vert_data <- list()
vert_data[["Hello"]]
is.null(vert_data[["Hello"]])
# Implementation of the ECLaT algorithm for frequent itemset mining
vert_data <- list()
lapply(lst_annots, function(x) {
lapply(x, function(y) {
if (is.null(vert_data[[y]])) {
vert_data[[y]] <- x
} else {
vert_data[[y]] <- c(x, vert_data[[y]])
}
})
})
length(vert_data)
head(vert_data)
lst_annots[[1]]
for (x in lst_annots) {
for (y in x) {
if (is.null(vert_data[[y]])) {
vert_data[[y]] <- x
} else {
vert_data[[y]] <- c(x, vert_data[[y]])
}
}
}
head(vert_data)
lst_annots[1]
names(lst_annots) <- paste0("a", 1:length(lst_annots))
lst_annots[1]
# Implementation of the ECLaT algorithm for frequent itemset mining
vert_data <- list()
for (x in names(lst_annots)) {
for (y in lst_annots[[x]]) {
if (is.null(vert_data[[y]])) {
vert_data[[y]] <- x
} else {
vert_data[[y]] <- c(x, vert_data[[y]])
}
}
}
head(vert_data)
sort(table(unlist(lst_annots)), decreasing = T)
vert_data[["GO:0032886"]]
sort(table(unlist(lst_annots)), decreasing = T)
vert_data[["GO:0008134"]]
sort(table(unlist(lst_annots)), decreasing = T)
vert_data[["GO:0034097"]]
tail(vert_data)
vert_data[sample(1:length(vert_data), 3)]
vert_data[sample(1:length(vert_data), 3)]
vert_data[[1]]
vert_data[[2]]
intersect(vert_data[[2]], vert_data[[2]])
intersect(vert_data[[2]], vert_data[[3]])
anc[[421]]
anc[421]
intersect(vert_data[["GO:0042136"]], vert_data[["GO:0009987"]])
vert_data[["GO:0042136"]]
vert_data[["GO:0009987"]]
head(goInfo)
vert_data[1]
names(vert_data[1])
goInfo[[names(vert_data[1])]]
goInfo[[names(vert_data[1892])]]
anc[["GO:0015078"]]
goInfo[anc[["GO:0015078"]]]
head(vert_data)
length(lst_annots)
minSupp <- 0.4 * length(lst_annots)
minSupp
length(vert_data)
hist(sapply(vert_data, length))
sapply(vert_data, length)
summary(sapply(vert_data, length))
which(sapply(vert_data, length) >= minSupp)
length(which(sapply(vert_data, length) >= minSupp))
minSupp <- 0.2 * length(lst_annots)
length(which(sapply(vert_data, length) >= minSupp))
aList <- list(a1 = c("apple", "banana", "orange", "strawberry", "cherry"),
a2 = c("banana", "cherry", "apple"),
a3 = c("apple", "strawberry", "pineapple"),
a4 = c("raspberry", "strawberr", "apple"),
a5 = c("pineapple", "lemon", "orange", "banana", "apple"),
a6 = c("lemon", "apple", "blueberry"),
a7 = c("watermelon", "apple", "banana", "mango"),
a8 = c("mango", "cherry", "apple", "lemon"),
a9 = c("orange", "banana", "strawberry"),
a10 = c("mango", "strawberry"))
aList
unlist(aList)
table(unlist(aList))
aList <- list(a1 = c("apple", "banana", "orange", "strawberry", "cherry"),
a2 = c("banana", "cherry", "apple"),
a3 = c("apple", "strawberry", "pineapple"),
a4 = c("raspberry", "strawberry", "apple"),
a5 = c("pineapple", "lemon", "orange", "banana", "apple"),
a6 = c("lemon", "apple", "blueberry"),
a7 = c("watermelon", "apple", "banana", "mango"),
a8 = c("mango", "cherry", "apple", "lemon"),
a9 = c("orange", "banana", "strawberry"),
a10 = c("mango", "strawberry"))
vertical_data <- list()
for (x in names(aList)) {
for (y in aList[[x]]) {
if (is.null(vertical_data[[y]])) {
vertical_data[[y]] <- x
} else {
vertical_data[[y]] <- c(x, vertical_data[[y]])
}
}
}
vertical_data
vertical_data <- list()
vertical_data <- list()
lapply(names(aList), function(x) {
lapply(aList[[x]], function(y) {
if (is.null(vertical_data[[y]])) {
vertical_data[[y]] <- x
} else {
vertical_data[[y]] <- c(x, vertical_data[[y]])
}
})
})
vertical_data
vertical_data <- list()
for (x in names(aList)) {
for (y in aList[[x]]) {
if (is.null(vertical_data[[y]])) {
vertical_data[[y]] <- x
} else {
vertical_data[[y]] <- c(x, vertical_data[[y]])
}
}
}
vertical_data
# Implementation of the ECLaT algorithm for frequent itemset mining
vert_data <- list()
for (x in names(lst_annots)) {
for (y in lst_annots[[x]]) {
if (is.null(vert_data[[y]])) {
vert_data[[y]] <- x
} else {
vert_data[[y]] <- c(x, vert_data[[y]])
}
}
}
vert_data <- split(rep(names(lst_annots), lengths(lst_annots)), unlist(lst_annots))
head(vert_data)
length(vert_data)
tail(vert_daata)
tail(vert_data)
rm(aList)
rm(vertical_data)
head(vert_data)
hist(sapply(vert_data, length))
summary(sapply(vert_data, length))
barplot(sapply(vert_data, length))
boxplot(sapply(vert_data, length))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("OmnipathR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("OmnipathR")
install.packages("spatial")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("OmnipathR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("OmnipathR")
setRepositories()
install.packages("installr")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade"))
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
setwd("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/theApp/data_GSE148729_Calu3_totalRNA")
list.files()
mock <- read.table("long_GSE148729_Calu3_mockInfection.txt", sep = "\t", header = T)
head(mock)
cov1 <- read.tabel("long_GSE148729_Calu3_sarsCov1.txt", sep = "\t", header = T)
cov1 <- read.table("long_GSE148729_Calu3_sarsCov1.txt", sep = "\t", header = T)
head(cov1)
tail(cov1)
cov2 <- read.table("long_GSE148729_Calu3_sarsCov2.txt", sep = "\t", header = T)
head(cov2)
tail(c0v2)
tail(cov2)
genes <- unique(mock$Gene)
length(genes)
head(genes)
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
timePoints
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
timePoints
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
timePoints
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
timePoints
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
timePoints
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
timePoints
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
timePoints
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
timePoints
minTimePoint <- timePoints[1,2]
minTimePoint
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
x
y
plot(x, y)
lm(y~x)
model(lm(y~x))
model1 <- lm(y~x)
model1$fitted.values
model1
model1$coefficients
seq(1, 30, by = 0.1)
seq(0, 30, by = 0.1)
a <- seq(0, 30, by = 0.1)
model1$coefficients
model1$coefficients[2]
model1$coefficients[1]
b <- a * model1$coefficients[2] + model1$coefficients[1]
a
as.data.frame(a, b)
b
as.data.frame(A = a, B = b)
data.frame(A = a, B = b)
plot(a, b)
a <- c(a, x)
b <- c(b, y)
plot(a, b)
rm(list=ls())
mock <- read.table("long_GSE148729_Calu3_mockInfection.txt", sep = "\t", header = T)
cov1 <- read.table("long_GSE148729_Calu3_sarsCov1.txt", sep = "\t", header = T)
cov2 <- read.table("long_GSE148729_Calu3_sarsCov2.txt", sep = "\t", header = T)
genes <- unique(mock$Gene)
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
timePoints
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
timePoints
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
timePoints
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
theModel
theModel
c(slope = theModel$coefficients[2], yInt = theModel$coefficients[1])
c(slope = theModel$coefficients[2], yInt = theModel$coefficients[1])
c(slope = theModel$coefficients[2], yInt = theModel$coefficients[1])
c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]])
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]])
plot(x, y)
# Takes in the DE between time points of some gene, and returns x,y coordinates for the line
# as well as the color of the points based on whether it was significantly expressed.
# Note: Time points must be sorted
makeLine <- function(timePoints) {
timePoints <- cov1[grep(sample(genes, 1), cov1$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
}
lr_mock <- lapply(genes, function(g) {
tP <- modk[grep(t, mock$Gene),]
return(makeLine(tP))
})
lr_mock <- lapply(genes, function(g) {
tP <- mock[grep(t, mock$Gene),]
return(makeLine(tP))
})
lr_mock <- lapply(genes, function(g) {
tP <- mock[grep(g, mock$Gene),]
return(makeLine(tP))
})
lr_mock <- lapply(head(genes), function(g) {
timePoints <- mock[g, mock$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
lr_mock <- lapply(head(genes), function(g) {
timePoints <- mock[g, mock$Gene,]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
lr_mock <- lapply(head(genes), function(g) {
timePoints <- mock[grep(g, mock$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
lr_mock
head(mock)
lr_mock <- lapply(genes, function(g) {
timePoints <- mock[grep(g, mock$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(slope = theModel$coefficients[[2]], yInt = theModel$coefficients[[1]]))
})
length(lr_mock)
length(lr_mock)
head(lr_mock)
dim(mock)
names(lr_mock) <- genes
head(lr_mock)
lr_mock <- do.cal(rbind, lr_mock)
lr_mock <- do.call(rbind, lr_mock)
head(lr_mock)
names(lr_rock)
names(lr_mock)
colnames(lr_mock)
colnames(lr_mock) <- c("mock_slope", "mock_yInt")
head(lr_mock)
lr_cov1 <- lapply(genes, function(g) {
timePoints <- cov1[grep(g, cov1$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(cov1_slope = theModel$coefficients[[2]], cov1_yInt = theModel$coefficients[[1]]))
})
names(lr_cov1) <- genes
head(lr_cov1)
lr_cov1 <- do.call(rbind, lr_cov1)
head(lr_cov1)
head(lr_cov1, 30)
lr_cov2 <- lapply(genes, function(g) {
timePoints <- cov2[grep(g, cov2$Gene),]
minTimePoint <- timePoints[1,2]
x <- c(minTimePoint, timePoints$T2)
y <- c(0, cumsum(timePoints$log2FoldChange))
theModel <- lm(y~x)
return(c(cov2_slope = theModel$coefficients[[2]], cov2_yInt = theModel$coefficients[[1]]))
})
names(lr_cov2) <- genes
lr_cov2 <- do.call(rbind, lr_cov2)
head(lr_cov2)
head(lr_cov1)
head(lr_mock)
head(lr_cov2)
which(row.names(lr_mock) != row.names(lr_cov1))
which(row.names(lr_mock) != row.names(lr_cov2))
which(row.names(lr_cov1) != row.names(lr_cov2))
retDF <- cbind(lr_mock, lr_cov1, lr_cov2)
head(retDF)
getwd()
head(retDF)
write.table("leastSquaresLinesPerGenePerInfections.txt", col.names = T, row.names = T, quote = F)
getwd()
write.table("leastSquaresLinesPerGenePerInfections.txt", col.names = T, row.names = T, quote = F, sep = "\t")
write.table("leastSquares.txt", col.names = T, row.names = T, quote = F, sep = "\t")
write.table(retDF, "leastSquaresLinesPerGenePerInfections.txt", col.names = T, row.names = T, quote = F, sep = )
write.table(retDF, "leastSquaresLinesPerGenePerInfections.txt", col.names = T, row.names = T, quote = F, sep = "\t")
ls()
rm(list=ls())
ls()
shiny::runApp('~/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp')
install.packages('rsconnect')
library(rsconnect)
setwd("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
rsconnect::setAccountInfo(name='zuhaibshiny', token='058AAAE9966CD0000A0C7135A01C43CE', secret='rfE3/5Us0Ylfp2MArZwUqEHv+E3j7ZJ17JImYUxq')
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
library(BiocManager)
options(repos = BiocManager::repositories())
options(repos = BiocManager::repositories())
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
setwd("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
list.files()
list.files("./data_GSE148729_Calu3_totalRNA")
#fls <- list.files()[grep("long_", list.files())]
fls <- lapply(list.files()[grep("data_", list.files())], function(d) {
path <- paste0("./", d, "/")
filesInDir <- list.files(path)
return(paste0(path, filesInDir[grep("long_", filesInDir)]))
})
fls
#fls <- list.files()[grep("long_", list.files())]
fls <- unlist(lapply(list.files()[grep("data_", list.files())], function(d) {
path <- paste0("./", d, "/")
filesInDir <- list.files(path)
return(paste0(path, filesInDir[grep("long_", filesInDir)]))
}))
fls
datasets <- lapply(fls, function(x) {
read.table(x, header = T, sep = "\t")
})
lapply(datasets, head)
names(datasets) <- fls
lapply(datasets, head)
runApp()
names(datasets)
names(datasets) <- str_replace_all(names(datasets), "\\.txt", "")
names(datasets) <- str_replace_all(names(datasets), "long_", "")
names(datasets)
names(datasets)
names(datasets) <- fls
names(datasets)
names(datasets) <- str_replace_all(names(datasets), "\\.txt", "")
names(datasets) <- str_replace_all(names(datasets), "\\..+long_", "")
names(datasets)
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
max(20, 40)
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
runApp()
setwd("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
#fls <- list.files()[grep("long_", list.files())]
fls <- unlist(lapply(list.files()[grep("data_", list.files())], function(d) {
path <- paste0("./", d, "/")
filesInDir <- list.files(path)
return(paste0(path, filesInDir[grep("long_", filesInDir)]))
}))
datasets <- lapply(fls, function(x) {
read.table(x, header = T, sep = "\t")
})
names(datasets) <- fls
names(datasets) <- str_replace_all(names(datasets), "\\.txt", "")
names(datasets) <- str_replace_all(names(datasets), "\\..+long_", "")
lapply(datasets, head)
grep("ENSG00000122180", datasets$GSE148729_Calu3_mockInfection$Gene)
datasets$GSE148729_Calu3_mockInfection[grep("ENSG00000122180", datasets$GSE148729_Calu3_mockInfection$Gene),]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datasets$GSE148729_Calu3_mockInfection[grep("ENSG00000087250", datasets$GSE148729_Calu3_mockInfection[,1]),]
list(c(1,2,3), 34, NA, "abc")
which(!is.na(list(c(1,2,3), 34, NA, "abc")))
runApp()
runApp()
2^c(1,2,3,4)
2^c(1,2,3,4.32)
runApp()
runApp()
paste(paste("Hello"), c(1,2,3,4,5))
runApp()
runApp()
runApp()
runApp()
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
list.files()
setwd("../")
getwd()
list.files
list.files()
setwd("theApp")
list.files()
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
deployApp("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/Pan-Coronavirus-Gene-Regulatory-Networks/theApp")
runApp()
